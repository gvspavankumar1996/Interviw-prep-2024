1)// # Given an array of meeting time intervals consisting of start and end times, find the minimum number of conference rooms required.

// Input: [[0, 30],[5, 10],[15, 20]]
// Output: 2

// Input: [[7,10],[2,4]]
// Output: 1
const getMinimumConferenceRooms =(meetingSchedules)=>{
  let temp=null;
  let conferenceRooms=1;
  
  for(let i=0; i<meetingSchedules.length;i++) {
    for(let j=i+1; j<meetingSchedules.length;j++){
      const startValueFirstSchedule=meetingSchedules[i]
      const startValueSecondSchedule=meetingSchedules[j]
      console.log("inside loop")
      if(startValueFirstSchedule[0]>startValueSecondSchedule[0]){
        temp=startValueFirstSchedule;
        meetingSchedules[i]=meetingSchedules[j];
        meetingSchedules[j]=temp
         }
      }
     }
  
  for(let i=0; i<meetingSchedules.length;i++) {
   const startValueFirstSchedule=meetingSchedules[i]
      const startValueSecondSchedule=meetingSchedules[i+1]
      
      if(i+1 <meetingSchedules.length ){
          if(startValueFirstSchedule[1]>startValueSecondSchedule[0]){
        conferenceRooms= conferenceRooms+1;
      }
      }
    
   
 }
  return conferenceRooms
  
}

const response=getMinimumConferenceRooms([[0, 30],[5, 10],[9, 20]]);

console.log(response,"response")
------------------------------------------------------------------------------------------------------
1) algorithm
2) system designing
3) hiring manager realtime time problem solving
4) HR
------------------------------------------------------------------------------------
write shorter syntax---
const promise = new Promise( (resolve, reject)=> {
  const string1 = "geeksforgeeks";
  const string2 = "geeksforgeeks";
string1===string2 ?   resolve() : reject();
});
promise
  .then(()=> {
    console.log("Promise resolved successfully");
  })
  .catch( ()=> {
    console.log("Promise is rejected");
  });
---------------------------------------------------------------
Chrislene Dias3:05 PM
console.log( 10 < 20 < 30 );
console.log( 30 > 20 > 10 );
Chrislene Dias3:07 PM
for (let i = 0; i < 3; i++) {
  setTimeout(function() { console.log(i); }, i*1000);
}
for (var i = 0; i < 3; i++) {
  setTimeout(function() { console.log(i); }, i*1000);
}
Chrislene Dias3:10 PM
function outer() {
    var data = 100;
    return obj = {
        data: 1000,
        print : () => console.log(this.data)
    }
}
var obj = outer()
obj.print() // what would be the answer
Chrislene Dias3:12 PM
function outer() {
    this.data = 100;
    this.obj = {
        data: 1000,
        print : () => console.log(this.data)
    }
}
const newobj1 = new outer() 
newobj1.obj.print()
Chrislene Dias3:13 PM
function outer() {
    this.data = 100;
    this.obj = {
        data: 1000,
        print : function(){console.log(this.data)}
    }
const newobj2 = new outer()
newobj2.obj.print() 
}
Chrislene Dias3:46 PM
welcome to bangalore - > emocleW oT erolagnaB
-------------------------------------------------------------------------
barraiser
(function main() {
  const readline = require("readline");
  const r1 = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  
  var solution = function(s) {
      let requiredArray=[];
      function addElements(arr){
            if(typeof arr === '')
          {
              addElements(s[i][j])
            
          }
          else{
              requiredArray=[...requiredArray,arr];
          }
          return requiredArray
      }
    for(let i=0; i<s.length; i++){
         for(let j=0; j<s[i].length; j++){
        //   console.log(s[i][j])
          const temp=s[i][j]
        //   console.log(typeof temp)
      const result=  addElements(s[i][j]);
      console.log(result)
        
       }
    }

    console.log(requiredArray,"req")
    // write your solution here..
  };
 
  var n, k;
  r1.on("line", (input) => {
    n = [ [1, 2, 3, 'javascript', [99,22,58, [88,99,22]]],
 [4, 5, 6, 'angular'],
 [7,8, 9, 'react js' [99,22,58, [88,99,22]]]
 ];
  }).on("close", () => {
    console.log(solution(n));
  });
})();

// [
// [1, 2, 3, [99,22,58, [88,99,22]]],
// [4, 5, 6],
// [7,8, 9, [99,22,58, [88,99,22]],

// ]
// [1, 5, 9]

// o/p
//[1,2,3,4,5,6,7,8,9]



var a = 3;
var a = 4;


let b = 3;
let b = 4;

const c = 3;
const c = 4;

let a = 5;
let b = '5';

console.log(a == b); 

console.log(a === b);

const words = ['react', 'script', 'interview', 'style', 'javascript'];



let add = function (x) {
  return function (y) {
    console.log(x + y)
  }
}   

const secondParameter=add(1)
secondParameter(2);




function Counter() {
  var count = 0
  this.incrementCount = function () {
    count++
    console.log(count)
  }
}

const hello= new Counter()

hello.incrementCount();

[1, 2, 5,6, 8,9,1,2,3,5,7,8,6,8,0,0,0,5,5,5,0,7,9,3,5]

//ascending
//descending
//unique
//reverse

---------------------------------------------------------------------------
no broker :-

// let a = new Promise((res, rej) => res(1))
// .then((x) => x + 1)
// .then((x) => {
// throw new Error('Error');
// })
// .catch(() => 1)
// .then((x) => x + 1)
// .then((x) => console.log(x))
// .catch(() => console.error);





// promise vs async await



// setTimeout console
// promise console
// setTimeout console
//which console will print first( micro macro eventloop)


// const arr=[2,5,6,3]

// arr.sort()

// console.log(arr)


// const obj={
//   name:'pavan'
// }

// let newObj=obj;

// newObj={
//   ...obj,
//   name:'jagdeesh'
// }


// console.log(obj)

// const name="pavan"

// name="jagdeesh"



// input:::::
// [[1, 2], [3, 4], [1, 4], [5, 6]]
// o/p::
// [[1, 4], [5, 6]]


// const mergeIntervals=(arr)=>{
  //   let firstElement=null;
//   let secondElement=null;
//   let compareArray=null;
//   let resultantArray=[];
  
  
  
//   for(let i=0;i<arr.length;i++)
//   {
    //     if(i===0)
//     {
//       compareArray=arr[i]
//       firstElement=arr[i][0]
//       secondElement=arr[i][1]
//     }
//     else
//     {
     
//       if((arr[i][0]<=secondElement && arr[i][0]>=firstElement) ||
//       (arr[i][1]<=secondElement && arr[i][1]>=firstElement) )
//       {
//         resultantArray=[...resultantArray,[firstElement,arr[i][1]]]
        
        
//       }
//     }

//   return resultantArray;
    
//   }
  
  
  
  
//   }

// console.log(mergeIntervals([[1, 2], [3, 4], [1, 4], [5, 6]]))



// // Sum(1)(2)(3)(4)....(n)
// //currying

// const sumOfNumbers=()=>{
//   let numberStored=0;
//   return function add(n){
//     numberStored+=n
//     return numberStored;
//   }
  
// }

// const h = sumOfNumbers()
// console.log(h(1))
-----------------------------------------------------------------------------
QueHealth:-
// input---> [2,4,9] output --->[2,5,0]
// input --->[2,4,6]  output--->[2,4,7] 
// input --->[9,9,9,9]  output--->[1,0,0,0,0] 


const addPlusOne=(arr)=>{
// console.log(arr.toString().split( "," ).join())
let number=null

for(let i=arr.length-1; i>0; i--){
    if(i === arr.length-1){
        if(arr[i]===9){
            arr[i]=0
            number=1
        }
        else{
            arr[i]+=1
            return arr
        }
         }
         else{
             if(arr[i]===9){
                 
             }
         }
  /// first check if last digit is 9
  //replce 9 with 0 and carry 1 to next element and repeat the logic
    
    
}
    
    // const newValue=arr[value].toString()
    // number=number+arr[value].toString() 
}
const requiredResult =+number+1
    console.log(requiredResult)
}


addPlusOne([9,9,9,9,9,9,9,9,9,9,9,9,])

-------------------------------------------------------------------------------
Pepsico DSA round:-

// Given a binary tree, print the left view (or the right view – any one)
snapshot pasted in same folder 

// Given an array of unsorted integers of size n, find the kth largest value.

// [2,5,6,8,15,35,12]


// function findLargest(arr){
//     for(i=0;i<arr.length-1;i++){
//     for(j=i+1;j<arr.length;j++){
//       let a=null;
//       if(arr[i]>arr[j]){
//         a=arr[i]
//         arr[i]=arr[j]
//         arr[j]=a
//       }
       
//     }
     
//   }
   
//   console.log(arr[arr.length-1],"array")
   
// }
 
// findLargest([2,5,6,8,15,35,12])

---------------------------------------------------
lets transport:-

Explain Array map, filter & reduce

Const arr=[1,2,3,4]

Const arr2=arr.filter((item,index)=>{

return item>1
}


var arr = [1,2,3,4,5] => [1,4,9,16,25] use reduce


for(var i=0; i< 10; i++) {
    setTimeout(console.log(i), 1000)
}

Explain call(), apply() and, bind() methods

What is currying in JavaScript?

function()(0)(1)(2)




function sqaure(n) {
    return n*n;
}

const memoFn = memoize(sqaure);

console.log(memoFn(1));
console.log(memoFn(2));
console.log(memoFn(1)); // should return from memo

[]

function memoize(fn) {
        // implement
}
Explain diff between useRef & createRef

useCallback & useMemo
How do we detect error in react?
What is Context API in react?
what is cors?
Parent child centered

<div class=”parent”>
    <div class=”child”>
</div>

.parent {

    width: 100vw
    height: 100vh
    Position: relative;
}

.child{
Display:flex
justify-content:center
}

Networking
http methods patch vs put
axios vs fetch

promisee.all and promise.race

-----------------------------------------------
random :-
1) Using java 8 return the fruit which has the largest count

       String[] fruits = { "grape", "apple", "orange", "pineapple", "pineapple", "orange","apple", "orange", "pineapple","kiwi", "pineapple"};
        
       expected Output :
       
       pineapple : 4
	   
-----------	  
2) 
String input = "welcometojava"
K = 3

expected:
List : wel, elc, lco, com, ome, met, eto, toj, oja, jav, ava

smallest - ava
Largest - wel
----------------------------------------------------------

servicenow:-
sql injection
css reset
find palindrome along with all substring palindromes
how to check performance of a web page and improve it
how to write secure frontend web application


